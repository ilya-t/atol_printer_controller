package com.atol.services.ecrservice;
import com.atol.services.ecrservice.ParcelableDate;

interface IEcr
{
	/** Возвращает ширину кассовой и/или контрольной ленты в символах.
	    @return Числовое значение – ширина кассовой и/или контрольной ленты в символах.
    */
	int		charLineLength();

	/** Возвращает серийный номер ККМ.
	    @return Строка, содержащая серийный номер ККМ, длина строки зависит от модели ККМ. Если номер на ККМ не введен, то строка заполнена знаками вопроса. */
	String	serialNumber();
	
	/** Возвращает признак фискализации ККМ.
	    @return
            true – ККМ фискализированная
            false – ККМ нефискализированная. */
	boolean	isFiscal();

	/** Возвращает системное время в ККМ.
	    @return Текущее время и дату ККМ. */
	ParcelableDate dateTime();

	/** Возвращает режим работы ККМ.
	    @return Числовое значение – номер режима ККМ:<br>
        <div style="padding-left: 20px;">0 - Режим выбора</div>
        <div style="padding-left: 20px;">1 - Режим регистрации</div>
        <div style="padding-left: 20px;">2 - X-отчет</div>
        <div style="padding-left: 20px;">3 - Z-отчет.</div>*/
	int		mode();

	/** Возвращает подрежим работы ККМ.
	    @return Числовое значение – номер подрежима работы ККМ.
	    (Подробнее см. Приложение 1. Режимы работы ККМ).
    */
	int		subMode();

	/** Возвращает текущее состояние чека.
	 * @return Числовое значение – текущее состояние чека:<br>
	 * <div style="padding-left: 20px;"> 0 - Чек закрыт</div>
     * <div style="padding-left: 20px;"> 1 - Чек продажи</div>
     * <div style="padding-left: 20px;"> 2 - Чек возврата</div>
     * <div style="padding-left: 20px;"> 3 - Чек аннулирования</div>
     * <div style="padding-left: 20px;"> 4 - Чек покупки</div>
     * <div style="padding-left: 20px;"> 5 - Чек возврата покупки</div>
     * <div style="padding-left: 20px;"> 6 - Чек аннулирования покупки.</div>
     */
	int		checkState();

	/** Возвращает номер чека.
	    @return Если чек открыт, то свойство содержит номер текущего чека.
	    Если чек закрыт, то свойство содержит номер следующего чека. */
	int		checkNumber();

	/** Определяет сквозной номер документа.
	    @return
	    Числовое значение - значение сквозного номера документа.
	    Данный номер больше на единицу, чем номер последнего закрытого документа на ККМ.
	    Сквозной номер увеличивается на единицу при печати любого документа на ККМ.
	    В зависимости от настроек ККМ сквозной номер документа может печататься при печати документов.*/
	int		docNumber();

	/** Возвращает признак открытости смены.
	    @return
             true – смена открыта
             false – смена закрыта.*/
	boolean	isSessionOpened();

	/** Возвращает номер последней закрытой смены.
	    @return Числовое значение - номер последний закрытой смены на ККМ.
	    Номер последней закрытой смены равен нулю до момента фискализации ККМ, и
	    до снятия первого суточного отчета с гашением, после фискализации ККМ.
    */
	int		session();

	/** Возвращает признак наличие бумаги
	    @return
	        true – бумага имеется<br>
	        false – бумага отсутствует.*/
	boolean	isPaperPresent();

	/** Возвращает версию текущего драйвера ККМ.
	    @return Строка в формате «X.X.X.X» с версией драйвера ККМ.
	    Если получить версию драйвера невозможно, то возвращаемое значение будет равно null.*/
	String	version();

	/** Получение логического значения регистра ККМ из драйвера. Метод только возвращает значение, которое хранится в драйвере, для его обновления используйте метод getRegister. (Подробнее см.Приложение 4. Регистры)
	    @param num номер регистра
	    @param arg дополнительный целочисленный аргумент, определяющий порядковый номер данных, которые необходимо получить из регистра. */
	boolean	registerValueAsBoolean (in int num, in int arg);

	/** Получение логического значения регистра ККМ из драйвера. Метод только возвращает значение, которое хранится в драйвере, для его обновления используйте метод getRegister. (Подробнее см.Приложение 4. Регистры)
	    @param num номер регистра
	    @param arg дополнительный целочисленный аргумент, определяющий порядковый номер данных, которые необходимо получить из регистра. */
	int		registerValueAsInt (in int num, in int arg);

	/** Получение логического значения регистра ККМ из драйвера. Метод только возвращает значение, которое хранится в драйвере, для его обновления используйте метод getRegister. (Подробнее см.Приложение 4. Регистры)
	    @param num номер регистра
	    @param arg дополнительный целочисленный аргумент, определяющий порядковый номер данных, которые необходимо получить из регистра. */
	double	registerValueAsDouble (in int num, in int arg);

	/** Получение логического значения регистра ККМ из драйвера. Метод только возвращает значение, которое хранится в драйвере, для его обновления используйте метод getRegister. (Подробнее см.Приложение 4. Регистры)
	    @param num номер регистра
	    @param arg дополнительный целочисленный аргумент, определяющий порядковый номер данных, которые необходимо получить из регистра. */
	ParcelableDate registerValueAsDate (in int num, in int arg);

	/** Получение логического значения регистра ККМ из драйвера. Метод только возвращает значение, которое хранится в драйвере, для его обновления используйте метод getRegister. (Подробнее см.Приложение 4. Регистры)
	    @param num номер регистра
	    @param arg дополнительный целочисленный аргумент, определяющий порядковый номер данных, которые необходимо получить из регистра. */
	String	registerValueAsString (in int num, in int arg);

	/** Данный метод предназначен для проверки включено ли устройство.
	    @return
	    true – устройство включено
	     false – устройство выключено.*/
	boolean isDeviceEnabled();

    /** Возвращает установленные параметры драйвера.
     * @param name название возвращаемого параметра.
     <table summary="Таблица доступных значений параметра name">
         <tr><th>Параметр name</th>
         <th>Возвращаемое значение</th></tr>

         <tr><td><code>transport</code></td>
         <td>Протокол обмена. В текущей версии доступно только «bluetooth».</td></tr>

         <tr><td><code>autoEnableBluetooth</code></td>
         <td>Автоматическое включение Bluetooth-адаптера при подключении к устройству:
            true – включать
            false – не включать.</td></tr>

         <tr><td><code>deviceAddress</code></td>
         <td>MAC-адрес подключаемой ККМ в формате “AA-BB-CC-DD- EE-FF”</td></tr>

         <tr><td>deviceName</code></td>
         <td>Имя подключаемой ККМ, определяемое при поиске Bluetooth- устройств. Используется только на странице свойств драйвера и может быть любым.</td></tr>

         <tr><td>model</code></td>
         <td>Модель устройства. В данной версии поддерживается только “51” – FPrint 11-K ПТК/ЕНВД </td></tr>

         <tr><td>userPassword</code></td>
         <td>Пароль пользователя для смены режимов работы ККМ.</td></tr>

         <tr><td>accessPassword</code></td>
         <td>Пароль доступа к ККМ.</td></tr>

         <tr><td>connectionType</code></td>
         <td>Тип соединения с устройством по Bluetooth. Ввиду особенностей реализации драйвера Bluetooth производителями устройств была создана необходимость использовать несколько возможных способов установки соединения:
             1 – обычное подключение
             2 – небезопасное подключение
             3 – альтернативное подключение.
         </td></tr>
     </table>

     @return Строка, содержащая параметры драйвера, либо null, если параметр name не найден */
	String	deviceSetting(in String name);

	/** Получение и изменение параметров драйвера.
	    @param name название параметра.
        @param value устанавливаемое значение.
	    @return Не рекомендуется использовать этот метод в пользовательских приложениях,
	    так как названия параметров могут менять от версии к версии.
	    Для восстановления настроек драйвера следует использовать метод setDeviceSettings. */
	void 	setDeviceSetting(in String name, in String value);

	/** Возвращает установленные параметры драйвера.
	    @return Строка, содержащая все параметры драйвера.*/
	String	deviceSettings();

	/** Устанавливает параметры драйвера.
	    @param settings установленные настройки оборудования. */
	void	setDeviceSettings (in String settings);

	/** Возвращает код результата выполнения последней операции.
	    @return Код результата выполнения последнего действия. Методы получения свойств драйвера ККМ не изменяют код результата.
    */
	int		resultCode();

	/** Возвращает описание ошибки, возникшей в результате последней операции.
	    @return Строка, содержащая описание ошибки, возникшей в результате последнего действия. Может в готовом виде использоваться для выдачи пользователю предупреждающих сообщений.
    */
	String	resultDescription();

	/** Возвращает расширенное описание ошибки, возникшей в результате последней операции.
	    @return Строка, содержащая описание ошибки, возникшей в результате последнего действия. В случае, если код ошибки равен -6 («Недопустимое значение»), определяет ошибочный параметр (подробнее см. Приложение 3. Ошибки параметров).
    */
	String	badParamDescription();

	/**
	 * Включение/выключение устройства.
	 * @param enable включение/выключение устройства:
     *          true – резервирование порта, подготовка к обмену, подключение к устройству;
     *          false – отключение от устройства, закрытие порта обмена.<br>
     * @return Код ошибки (см. ПРиложение 2. Коды и описание ошибок) <br>
     * список ошибок доступен в {@link com.atolprinterhelper.PrintError#generateErrorList()}
     */
	int		enableDevice(in boolean enable);

	/** Выдает звуковой сигнал на ККМ.
     * @return Код ошибки (см. ПРиложение 2. Коды и описание ошибок) <br>
     * список ошибок доступен в {@link com.atolprinterhelper.PrintError#generateErrorList()}
     */
	int		beep();

	/** Открытие денежного ящика, подключенного к ККМ.
     * @return Код ошибки (см. ПРиложение 2. Коды и описание ошибок) <br>
     * список ошибок доступен в {@link com.atolprinterhelper.PrintError#generateErrorList()}
     */
	int		openDrawer();

	/** Обновление значений свойств ККМ. Получает текущее состояние свойств ККМ.*
	 * * - в т.ч. обновляет значение номера последнего чека
     * @return Код ошибки (см. ПРиложение 2. Коды и описание ошибок) <br>
     * список ошибок доступен в {@link com.atolprinterhelper.PrintError#generateErrorList()}
     */
	int		updateStatus();

	/**
     * Устанавливает системную дату на ККМ. Если вводимая дата больше, чем на один день, текущей даты, то ККМ требует подтверждения ввода даты – необходимо второй раз вызвать метод.
     * @param date устанавливаемая дата, время в параметре не используется
     * @return Код ошибки (см. ПРиложение 2. Коды и описание ошибок) <br>
     * список ошибок доступен в {@link com.atolprinterhelper.PrintError#generateErrorList()}
     */
	int		setDate(in ParcelableDate date);

	/** Устанавливает время на ККМ.
	 * @param time устанавливаемое время, дата в параметре не используется.
     * @return Код ошибки (см. ПРиложение 2. Коды и описание ошибок) <br>
     * список ошибок доступен в {@link com.atolprinterhelper.PrintError#generateErrorList()}
     */
	int		setTime(in ParcelableDate time);

	/**
	 * Устанавливает режим ККМ.
	 * @param mode режим ККМ: <br> 0 - Режим выбора<br>
                   1 - Режим регистрации<br>
                   2 - X-отчет<br>
                   3 - Z-отчет.
     * @return Код ошибки (см. ПРиложение 2. Коды и описание ошибок) <br>
     * список ошибок доступен в {@link com.atolprinterhelper.PrintError#generateErrorList()}
     */
	int		setMode(in int mode);

	/**
	 * Выход из текущего режима ККМ. Служит для выхода из текущего режима ККМ. На ККМ текущим становится режим «Выбор». (Подробнее см. Приложение 1. Режимы работы ККМ).
     * @return Код ошибки (см. ПРиложение 2. Коды и описание ошибок) <br>
     * список ошибок доступен в {@link com.atolprinterhelper.PrintError#generateErrorList()}
     */
	int		resetMode();

	/**
	 * Отрезка бумаги.
	 * @param type тип отрезки бумаги:<br>
     *              0 - Отрезка бумаги по всей ширине ленты<br>
     *              1 - Частичная отрезка бумаги.
     * @return Код ошибки (см. ПРиложение 2. Коды и описание ошибок) <br>
     * список ошибок доступен в {@link com.atolprinterhelper.PrintError#generateErrorList()}
     */
	int		paperCut(in int type);

	/**
	 * Печать клише на чековой и/или контрольной ленте.
     * @return Код ошибки (см. ПРиложение 2. Коды и описание ошибок) <br>
     * список ошибок доступен в {@link com.atolprinterhelper.PrintError#generateErrorList()}
     */
	int		printHeader();

	/**
	 * Печать на чековой и/или контрольной ленте блока атрибутов чека.
     * @return Код ошибки (см. ПРиложение 2. Коды и описание ошибок) <br>
     * список ошибок доступен в {@link com.atolprinterhelper.PrintError#generateErrorList()}
     */
	int		printFooter();

    /**
     * Печать на чековой и/или контрольной ленте строки символов.
     * @param text строка символов для печати
     * @param textWrap параметр задает правило переноса текста на следующую строку в случае,
     * если печатается символов больше, чем ширина ленты: <br>
     * <div style="padding-left: 20px;">
     *         0 - Нет переноса. Если переноса нет, а длина текста <br>
     *             <div style="padding-left: 19px;">
     *             больше ширины ленты – возвращается ошибка <br>
     *             «(-6) Недопустимое значение» </div>
     *         1 - По строке. Если перенос по строке, то в каждой
     *             <div style="padding-left: 19px;">
     *             строке печатается максимально возможное количество символов. </div>
     *         2 - По словам. Если выбран перенос по словам, то печатаются слова, <br>
     *             <div style="padding-left: 19px;">
     *             которые целиком помещаются в строчке (слова отделяются следующими <br>
     *             символами и сочетаниями символов: <br>
     *             « » (пробел), «, » (запятая + пробел), «. » (точка + пробел), «: » (двоеточие + пробел), «;;», «-», «?», «!», «)», «}», «]»), остальные слова – на следующей строке.
     *                 </div>
     * </div><br>
     * @param alignment Параметр задает выравнивание текста на ленте: <br>
     * <div style="padding-left: 20px;">
     *      0 – По левому краю<br>
     *      1 – По центру<br>
     *      2 – По правому краю.
     * </div>
     * @return Код ошибки (см. ПРиложение 2. Коды и описание ошибок) <br>
     * список ошибок доступен в {@link com.atolprinterhelper.PrintError#generateErrorList()}
     */
	int		printString(in String text, in int textWrap, in int alignment);

    /**
     * Печать на чековой и/или контрольной ленте штрихкодов.
     * @param barcode символьный эквивалент штрихкода.
     * @param alignment Параметр задает выравнивание текста на ленте: <br>
     * <div style="padding-left: 20px;">
     *      0 – По левому краю<br>
     *      1 – По центру<br>
     *      2 – По правому краю.
     * </div>
     * @param height высота печатаемого штрихкода в точках.
     * @param barcodeType тип печатаемого штрихкода:<br>
     * <div style="padding-left: 20px;">
     *      0 - EAN8
     *      1 - EAN13<br>
     *      2 - UPCA<br>
     *      3 - CODE39.
     * </div>
     * @return Код ошибки (см. Приложение 2. Коды и описание ошибок) <br>
     * список ошибок доступен в {@link com.atolprinterhelper.PrintError#generateErrorList()}
     */
	int		printBarcode(in String barcode, in int alignment, in int height,
						 in int barcodeType, in double scale);

	/**
	 * Открытие чека соответствующего типа.
     * @param type тип чека: <br>
     * <div style="padding-left: 20px;">
     *             0 - Чек закрыт<br>
     *             1 - Чек продажи<br>
     *             2 - Чек возврата<br>
     *             3 - Чек аннулирования<br>
     *             4 - Чек покупки<br>
     *             5 - Чек возврата покупки<br>
     *             6 - Чек аннулирования покупки.
     * </div>
     * @return Код ошибки (см. ПРиложение 2. Коды и описание ошибок) <br>
     * список ошибок доступен в {@link com.atolprinterhelper.PrintError#generateErrorList()}
     */
	int		openCheck(in int type);

	/**
	 * Производит регистрацию платежа по чеку заданным типом оплаты с подсчетом суммы сдачи и неоплаченного остатка чека.
	 * @param sum сумма оплаты
	 * @type тип платежа:<br>
     * <div style="padding-left: 20px;">
     *       0 – наличными<br>
     *       1 – тип оплаты 1<br>
     *       2 – тип оплаты 2<br>
     *       3 – тип оплаты 3<br>
     *       4 – тип оплаты 4<br>
     *       5 – тип оплаты 5.
     * </div>
     * @return Код ошибки (см. ПРиложение 2. Коды и описание ошибок) <br>
     * список ошибок доступен в {@link com.atolprinterhelper.PrintError#generateErrorList()}
     */
	int		payment(in double sum, in int type);

	/**
	 * Аннулирование (отмена) всего чека. При этом на чеке печатается «ЧЕК АННУЛИРОВАН»
     * @return Код ошибки (см. ПРиложение 2. Коды и описание ошибок) <br>
     * список ошибок доступен в {@link com.atolprinterhelper.PrintError#generateErrorList()}
     */
	int		cancelCheck();

	/**
	 * Закрытие чека без подсчета суммы сдачи.
	 * @param type тип закрытия чека способами оплаты:<br>
     * <div style="padding-left: 20px;">
     *       0 – наличными<br>
     *       1 – тип оплаты 1<br>
     *       2 – тип оплаты 2<br>
     *       3 – тип оплаты 3<br>
     *       4 – тип оплаты 4<br>
     *       5 – тип оплаты 5.
     * @return Код ошибки (см. ПРиложение 2. Коды и описание ошибок) <br>
     * список ошибок доступен в {@link com.atolprinterhelper.PrintError#generateErrorList()}
     */
	int		closeCheck(in int type);

	/**
	 * Открытие смены на ККМ.
	 * @param caption строка символов, которые будут печататься в теле документа «Открытие смены».
     * @return Код ошибки (см. ПРиложение 2. Коды и описание ошибок) <br>
     * список ошибок доступен в {@link com.atolprinterhelper.PrintError#generateErrorList()}
     */
	int		openSession(in String caption);

	/**
	 * Печать отчета на ККМ.
	 * @param type тип отчета:<br>
     * <div style="padding-left: 20px;">
     *      0 - Гашение контрольной ленты<br>
     *      1 - Суточный отчет с гашением<br>
     *      2 - Суточный отчет без гашения<br>
     *      7 - Отчет по секциям<br>
     *      34 - Печать документа из ЭЖ по номеру<br>
     *      35 - Печать ЭЖ, полный<br>
     *      36 - Печать ЭЖ, сокращенный.
     * </div>
     * @param sessionNumber номер смены, на текущий момент не используется
     * @param docNumber номер документа
     * @param clearJournal очистка журнала:<br>
     * <div style="padding-left: 20px;">
     *      true – очищать журнал;
     *      false - не очищать журнал.
     * </div>
     * @return Код ошибки (см. ПРиложение 2. Коды и описание ошибок) <br>
     * список ошибок доступен в {@link com.atolprinterhelper.PrintError#generateErrorList()}
     */
	int		report(in int type,	in int sessionNumber, in int docNumber, in boolean clearJournal);

    /**
     * Регистрация продажи.
     * @param title наименование товара
     * @param textWrap параметр задает правило переноса текста на следующую строку в случае,
     * если печатается символов больше, чем ширина ленты: <br>
     * <div style="padding-left: 20px;">
     *         0 - Нет переноса. Если переноса нет, а длина текста <br>
     *             <div style="padding-left: 19px;">
     *             больше ширины ленты – возвращается ошибка <br>
     *             «(-6) Недопустимое значение» </div>
     *         1 - По строке. Если перенос по строке, то в каждой
     *             <div style="padding-left: 19px;">
     *             строке печатается максимально возможное количество символов. </div>
     *         2 - По словам. Если выбран перенос по словам, то печатаются слова, <br>
     *             <div style="padding-left: 19px;">
     *             которые целиком помещаются в строчке (слова отделяются следующими <br>
     *             символами и сочетаниями символов: <br>
     *             « » (пробел), «, » (запятая + пробел), «. » (точка + пробел), «: » (двоеточие + пробел), «;;», «-», «?», «!», «)», «}», «]»), остальные слова – на следующей строке.
     *                 </div>
     * </div><br>
     * @param alignment Параметр задает выравнивание текста на ленте: <br>
     * <div style="padding-left: 20px;">
     *      0 – По левому краю<br>
     *      1 – По центру<br>
     *      2 – По правому краю.
     * </div>
     * @param quantity количество товара(*)<br>
     * @param price цена товара(*)<br>
     * @param department секция. Регистрация продажи при Department = 0 приводит к регистрации в 1-ю секцию, но номер секции при этом на чеке не печатается.<br>
     * <br> * - Для выполнения данного метода ни Price, ни Quantity не могут содержать 0, но их произведение после округления может становиться равным нулю
     * @return Код ошибки (см. ПРиложение 2. Коды и описание ошибок) <br>
     * список ошибок доступен в {@link com.atolprinterhelper.PrintError#generateErrorList()}
     */
	int		registration (in String title, in int textWrap, in int alignment,
						in double quantity, in double price, in int department);

    /**
     * Регистрация аннулирования продажи.
     * @param title наименование товара
     * @param textWrap параметр задает правило переноса текста на следующую строку в случае,
     * если печатается символов больше, чем ширина ленты: <br>
     * <div style="padding-left: 20px;">
     *         0 - Нет переноса. Если переноса нет, а длина текста <br>
     *             <div style="padding-left: 19px;">
     *             больше ширины ленты – возвращается ошибка <br>
     *             «(-6) Недопустимое значение» </div>
     *         1 - По строке. Если перенос по строке, то в каждой
     *             <div style="padding-left: 19px;">
     *             строке печатается максимально возможное количество символов. </div>
     *         2 - По словам. Если выбран перенос по словам, то печатаются слова, <br>
     *             <div style="padding-left: 19px;">
     *             которые целиком помещаются в строчке (слова отделяются следующими <br>
     *             символами и сочетаниями символов: <br>
     *             « » (пробел), «, » (запятая + пробел), «. » (точка + пробел), «: » (двоеточие + пробел), «;;», «-», «?», «!», «)», «}», «]»), остальные слова – на следующей строке.
     *                 </div>
     * </div><br>
     * @param alignment Параметр задает выравнивание текста на ленте: <br>
     * <div style="padding-left: 20px;">
     *      0 – По левому краю<br>
     *      1 – По центру<br>
     *      2 – По правому краю.
     * </div>
     * @param quantity количество товара(*)<br>
     * @param price цена товара(*)<br>
	 * @param enableCheckSum осуществлять проверку наличности:<br>
     * <div style="padding-left: 20px;">
     *  «true» - наличность проверяется<br>
     *  «false» - наличность не проверяется.
     * </div>
     * <br> * - Для выполнения данного метода ни Price, ни Quantity не могут содержать 0, но их произведение после округления может становиться равным нулю
     * @return Код ошибки (см. ПРиложение 2. Коды и описание ошибок) <br>
     * список ошибок доступен в {@link com.atolprinterhelper.PrintError#generateErrorList()}
     */
	int		annulate (in String title, in int textWrap, in int alignment,
						in double quantity, in double price, in boolean enableCheckSum);

    /**
     * Регистрация возврата товара.
     * @param title наименование товара
     * @param textWrap параметр задает правило переноса текста на следующую строку в случае,
     * если печатается символов больше, чем ширина ленты: <br>
     * <div style="padding-left: 20px;">
     *         0 - Нет переноса. Если переноса нет, а длина текста <br>
     *             <div style="padding-left: 19px;">
     *             больше ширины ленты – возвращается ошибка <br>
     *             «(-6) Недопустимое значение» </div>
     *         1 - По строке. Если перенос по строке, то в каждой
     *             <div style="padding-left: 19px;">
     *             строке печатается максимально возможное количество символов. </div>
     *         2 - По словам. Если выбран перенос по словам, то печатаются слова, <br>
     *             <div style="padding-left: 19px;">
     *             которые целиком помещаются в строчке (слова отделяются следующими <br>
     *             символами и сочетаниями символов: <br>
     *             « » (пробел), «, » (запятая + пробел), «. » (точка + пробел), «: » (двоеточие + пробел), «;;», «-», «?», «!», «)», «}», «]»), остальные слова – на следующей строке.
     *                 </div>
     * </div><br>
     * @param alignment Параметр задает выравнивание текста на ленте: <br>
     * <div style="padding-left: 20px;">
     *      0 – По левому краю<br>
     *      1 – По центру<br>
     *      2 – По правому краю.
     * </div>
     * @param quantity количество товара(*)<br>
     * @param price цена товара(*)<br>
	 * @param enableCheckSum осуществлять проверку наличности:<br>
     * <div style="padding-left: 20px;">
     *  «true» - наличность проверяется<br>
     *  «false» - наличность не проверяется.
     * </div>
     * <br> * - Для выполнения данного метода ни Price, ни Quantity не могут содержать 0, но их произведение после округления может становиться равным нулю
     * @return Код ошибки (см. ПРиложение 2. Коды и описание ошибок) <br>
     * список ошибок доступен в {@link com.atolprinterhelper.PrintError#generateErrorList()}
     */
	int		refund (in String title, in int textWrap, in int alignment,
					in double quantity,	in double price, in boolean enableCheckSum);

    /**
     * Сторнирование регистрации.
     * @param title наименование товара
     * @param textWrap параметр задает правило переноса текста на следующую строку в случае,
     * если печатается символов больше, чем ширина ленты: <br>
     * <div style="padding-left: 20px;">
     *         0 - Нет переноса. Если переноса нет, а длина текста <br>
     *             <div style="padding-left: 19px;">
     *             больше ширины ленты – возвращается ошибка <br>
     *             «(-6) Недопустимое значение» </div>
     *         1 - По строке. Если перенос по строке, то в каждой
     *             <div style="padding-left: 19px;">
     *             строке печатается максимально возможное количество символов. </div>
     *         2 - По словам. Если выбран перенос по словам, то печатаются слова, <br>
     *             <div style="padding-left: 19px;">
     *             которые целиком помещаются в строчке (слова отделяются следующими <br>
     *             символами и сочетаниями символов: <br>
     *             « » (пробел), «, » (запятая + пробел), «. » (точка + пробел), «: » (двоеточие + пробел), «;;», «-», «?», «!», «)», «}», «]»), остальные слова – на следующей строке.
     *                 </div>
     * </div><br>
     * @param alignment Параметр задает выравнивание текста на ленте: <br>
     * <div style="padding-left: 20px;">
     *      0 – По левому краю<br>
     *      1 – По центру<br>
     *      2 – По правому краю.
     * </div>
     * @param quantity количество товара(*)<br>
     * @param price цена товара(*)<br>
     * @param department секция. Регистрация продажи при Department = 0 приводит к регистрации в 1-ю секцию, но номер секции при этом на чеке не печатается.<br>
     * <br> * - Для выполнения данного метода ни Price, ни Quantity не могут содержать 0, но их произведение после округления может становиться равным нулю
     * @return Код ошибки (см. ПРиложение 2. Коды и описание ошибок) <br>
     * список ошибок доступен в {@link com.atolprinterhelper.PrintError#generateErrorList()}
     */
	int		storno (in String title, in int textWrap, in int alignment,
					in double quantity, in double price, in int department);

	/**
	 * Регистрация покупки.
     * @param title наименование товара
     * @param textWrap параметр задает правило переноса текста на следующую строку в случае,
     * если печатается символов больше, чем ширина ленты: <br>
     * <div style="padding-left: 20px;">
     *         0 - Нет переноса. Если переноса нет, а длина текста <br>
     *             <div style="padding-left: 19px;">
     *             больше ширины ленты – возвращается ошибка <br>
     *             «(-6) Недопустимое значение» </div>
     *         1 - По строке. Если перенос по строке, то в каждой
     *             <div style="padding-left: 19px;">
     *             строке печатается максимально возможное количество символов. </div>
     *         2 - По словам. Если выбран перенос по словам, то печатаются слова, <br>
     *             <div style="padding-left: 19px;">
     *             которые целиком помещаются в строчке (слова отделяются следующими <br>
     *             символами и сочетаниями символов: <br>
     *             « » (пробел), «, » (запятая + пробел), «. » (точка + пробел), «: » (двоеточие + пробел), «;;», «-», «?», «!», «)», «}», «]»), остальные слова – на следующей строке.
     *                 </div>
     * </div><br>
     * @param alignment Параметр задает выравнивание текста на ленте: <br>
     * <div style="padding-left: 20px;">
     *      0 – По левому краю<br>
     *      1 – По центру<br>
     *      2 – По правому краю.
     * </div>
     * @param quantity количество товара(*)<br>
     * @param price цена товара(*)<br>
     * @param department секция. Регистрация продажи при Department = 0 приводит к регистрации в 1-ю секцию, но номер секции при этом на чеке не печатается.<br>
	 * @param enableCheckSum осуществлять проверку наличности:<br>
     * <div style="padding-left: 20px;">
     *  «true» - наличность проверяется<br>
     *  «false» - наличность не проверяется.
     * </div>
     * <br> * - Для выполнения данного метода ни Price, ни Quantity не могут содержать 0, но их произведение после округления может становиться равным нулю
     * @return Код ошибки (см. ПРиложение 2. Коды и описание ошибок) <br>
     * список ошибок доступен в {@link com.atolprinterhelper.PrintError#generateErrorList()}
     */
	int		buy    (in String title, in int textWrap, in int alignment,
					in double quantity,	in double price, in int department,	in boolean enableCheckSum);

	/**
	 * Регистрация аннулирования покупки.
     * @param title наименование товара
     * @param textWrap параметр задает правило переноса текста на следующую строку в случае,
     * если печатается символов больше, чем ширина ленты: <br>
     * <div style="padding-left: 20px;">
     *         0 - Нет переноса. Если переноса нет, а длина текста <br>
     *             <div style="padding-left: 19px;">
     *             больше ширины ленты – возвращается ошибка <br>
     *             «(-6) Недопустимое значение» </div>
     *         1 - По строке. Если перенос по строке, то в каждой
     *             <div style="padding-left: 19px;">
     *             строке печатается максимально возможное количество символов. </div>
     *         2 - По словам. Если выбран перенос по словам, то печатаются слова, <br>
     *             <div style="padding-left: 19px;">
     *             которые целиком помещаются в строчке (слова отделяются следующими <br>
     *             символами и сочетаниями символов: <br>
     *             « » (пробел), «, » (запятая + пробел), «. » (точка + пробел), «: » (двоеточие + пробел), «;;», «-», «?», «!», «)», «}», «]»), остальные слова – на следующей строке.
     *                 </div>
     * </div><br>
     * @param alignment Параметр задает выравнивание текста на ленте: <br>
     * <div style="padding-left: 20px;">
     *      0 – По левому краю<br>
     *      1 – По центру<br>
     *      2 – По правому краю.
     * </div>
     * @param quantity количество товара(*)<br>
     * @param price цена товара(*)<br>
     * <br> * - Для выполнения данного метода ни Price, ни Quantity не могут содержать 0, но их произведение после округления может становиться равным нулю
     * @return Код ошибки (см. ПРиложение 2. Коды и описание ошибок) <br>
     * список ошибок доступен в {@link com.atolprinterhelper.PrintError#generateErrorList()}
     */
	int		annulateBuy (in String title, in int textWrap, in int alignment,
						in double quantity, in double price);

	/**
	 * Регистрация возврата покупки.
     * @param title наименование товара
     * @param textWrap параметр задает правило переноса текста на следующую строку в случае,
     * если печатается символов больше, чем ширина ленты: <br>
     * <div style="padding-left: 20px;">
     *         0 - Нет переноса. Если переноса нет, а длина текста <br>
     *             <div style="padding-left: 19px;">
     *             больше ширины ленты – возвращается ошибка <br>
     *             «(-6) Недопустимое значение» </div>
     *         1 - По строке. Если перенос по строке, то в каждой
     *             <div style="padding-left: 19px;">
     *             строке печатается максимально возможное количество символов. </div>
     *         2 - По словам. Если выбран перенос по словам, то печатаются слова, <br>
     *             <div style="padding-left: 19px;">
     *             которые целиком помещаются в строчке (слова отделяются следующими <br>
     *             символами и сочетаниями символов: <br>
     *             « » (пробел), «, » (запятая + пробел), «. » (точка + пробел), «: » (двоеточие + пробел), «;;», «-», «?», «!», «)», «}», «]»), остальные слова – на следующей строке.
     *                 </div>
     * </div><br>
     * @param alignment Параметр задает выравнивание текста на ленте: <br>
     * <div style="padding-left: 20px;">
     *      0 – По левому краю<br>
     *      1 – По центру<br>
     *      2 – По правому краю.
     * </div>
     * @param quantity количество товара(*)<br>
     * @param price цена товара(*)<br>
     * <br> * - Для выполнения данного метода ни Price, ни Quantity не могут содержать 0, но их произведение после округления может становиться равным нулю
     * @return Код ошибки (см. ПРиложение 2. Коды и описание ошибок) <br>
     * список ошибок доступен в {@link com.atolprinterhelper.PrintError#generateErrorList()}
     */
	int		refundBuy (in String title, in int textWrap, in int alignment,
						in double quantity, in double price);

	/**
	 * Регистрация внесения наличных денег в кассу.
     * @param sum сумма вносимых денег.
     * @return Код ошибки (см. ПРиложение 2. Коды и описание ошибок) <br>
     * список ошибок доступен в {@link com.atolprinterhelper.PrintError#generateErrorList()}
     */
	int		cashIn (in double sum);

	/**
	 * Регистрация изъятия наличных денег из кассы.
     * @param sum сумма изымаемых денег
     * @return Код ошибки (см. ПРиложение 2. Коды и описание ошибок) <br>
     * список ошибок доступен в {@link com.atolprinterhelper.PrintError#generateErrorList()}
     */
	int		cashOut (in double sum);

	/**
	 * Метод предназначен для возможности получения значений основных операционных и денежных регистров, а также для получения основных параметров ККМ (дата, время, версия, номер документа, сквозной номер документа и т.д.). Результатом выполнения данного метода является обновление значения регистра ККМ в драйвере. Подробнее о работе с регистрами смотрите в «Приложение 4. Регистры».
	 * @param num Номер регистра.
	 * @param param1 Дополнительный параметр, который необходим для обновления значения регистра в драйвере ККМ
	 * @param param2 Дополнительный параметр, который необходим для обновления значения регистра в драйвере ККМ
     * @return Код ошибки (см. ПРиложение 2. Коды и описание ошибок) <br>
     * список ошибок доступен в {@link com.atolprinterhelper.PrintError#generateErrorList()}
     */
	int		getRegister (in int num, in int param1, in int param2);
}